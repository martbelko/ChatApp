// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using wa_api.Data;

#nullable disable

namespace waapi.Migrations
{
    [DbContext(typeof(WaDbContext))]
    [Migration("20230629143222_AddRTFamily")]
    partial class AddRTFamily
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ConversationUser", b =>
                {
                    b.Property<int>("ConversationsId")
                        .HasColumnType("integer");

                    b.Property<int>("MembersId")
                        .HasColumnType("integer");

                    b.HasKey("ConversationsId", "MembersId");

                    b.HasIndex("MembersId");

                    b.ToTable("ConversationUser");
                });

            modelBuilder.Entity("wa_api.Models.Conversation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("Conversations");
                });

            modelBuilder.Entity("wa_api.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("integer");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ConversationId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ConversationId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("wa_api.Models.Password", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("Hash")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("Salt")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Passwords");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Hash = new byte[] { 137, 191, 136, 66, 56, 157, 247, 184, 21, 5, 127, 71, 107, 83, 119, 54, 49, 53, 246, 114, 165, 192, 73, 19, 108, 245, 65, 115, 152, 254, 153, 150, 147, 236, 25, 73, 181, 60, 20, 83, 32, 32, 216, 230, 218, 238, 6, 233, 234, 164, 233, 43, 195, 235, 4, 29, 24, 11, 184, 242, 145, 85, 255, 111, 221, 76, 242, 198, 12, 191, 146, 142, 91, 149, 163, 197, 232, 144, 163, 186, 146, 12, 96, 239, 168, 61, 160, 12, 164, 140, 34, 162, 68, 94, 2, 229, 8, 73, 171, 172, 251, 230, 219, 187, 192, 219, 233, 13, 127, 207, 115, 168, 138, 159, 84, 41, 128, 224, 180, 119, 196, 104, 222, 212, 65, 127, 42, 69, 31, 189, 199, 6, 27, 24, 44, 158, 10, 30, 28, 181, 2, 176, 182, 204, 148, 122, 25, 240, 127, 232, 66, 171, 211, 96, 48, 170, 14, 162, 117, 10, 88, 8, 6, 184, 163, 206, 28, 83, 94, 225, 209, 172, 210, 151, 215, 143, 218, 189, 37, 185, 102, 38, 96, 145, 86, 117, 151, 98, 254, 72, 8, 201, 90, 108, 152, 136, 2, 248, 230, 219, 59, 45, 227, 172, 201, 114, 15, 225, 113, 215, 25, 232, 68, 194, 7, 235, 153, 149, 211, 199, 17, 51, 41, 247, 114, 38, 161, 141, 143, 173, 124, 226, 251, 150, 241, 87, 51, 189, 213, 2, 163, 99, 208, 184, 135, 13, 9, 254, 51, 217, 200, 47, 25, 195, 15, 131, 140, 92, 117, 248, 220, 20, 198, 1, 209, 31, 57, 181, 204, 208, 66, 116, 30, 226, 133, 164, 40, 174, 220, 41, 134, 168, 12, 219, 206, 194, 47, 97, 84, 244, 42, 110, 115, 195, 47, 215, 123, 102, 171, 16, 164, 243, 72, 103, 26, 7, 77, 122, 254, 193, 73, 149, 91, 121, 72, 201, 125, 34, 189, 20, 27, 69, 210, 105, 230, 250, 60, 65, 140, 243, 163, 75, 233, 136, 103, 40, 241, 91, 153, 13, 243, 131, 82, 137, 219, 19, 251, 171, 228, 93, 20, 65, 251, 124, 76, 160, 168, 164, 0, 254, 200, 219, 33, 5, 81, 210, 34, 43, 222, 0, 191, 171, 80, 196, 41, 74, 210, 180, 138, 108, 45, 22, 99, 113, 226, 193, 42, 31, 243, 145, 45, 83, 106, 253, 183, 220, 63, 119, 35, 179, 197, 186, 226, 222, 114, 59, 58, 75, 70, 80, 236, 74, 208, 2, 23, 107, 189, 27, 130, 88, 46, 227, 220, 36, 11, 185, 19, 161, 44, 164, 31, 176, 210, 143, 23, 182, 172, 184, 242, 68, 124, 165, 213, 119, 83, 75, 35, 220, 66, 249, 124, 17, 77, 50, 174, 106, 101, 66, 3, 127, 141, 90, 122, 13, 81, 111, 247, 162, 162, 114, 165, 83, 109, 237, 68, 229, 13, 181, 65, 248, 46, 122, 213, 83, 7, 244, 61, 200, 144, 177, 130, 182, 68, 122, 159, 14, 146, 225, 200, 59, 47, 84, 255, 252, 98, 69, 205, 0, 144, 162, 173, 162 },
                            Salt = new byte[] { 221, 205, 51, 243, 129, 38, 165, 214, 202, 144, 224, 244, 194, 132, 241, 177, 73, 97, 1, 152, 125, 18, 208, 244, 90, 5, 56, 253, 254, 64, 199, 148, 10, 160, 40, 152, 7, 146, 13, 147, 248, 180, 179, 203, 81, 37, 175, 146, 43, 209, 84, 194, 116, 45, 130, 98, 5, 196, 21, 196, 156, 196, 65, 180, 179, 79, 212, 143, 179, 163, 184, 145, 152, 127, 196, 136, 169, 82, 91, 231, 47, 5, 82, 34, 40, 76, 82, 255, 174, 157, 62, 203, 81, 4, 163, 108, 96, 215, 116, 253, 93, 201, 105, 41, 96, 82, 223, 177, 60, 177, 62, 97, 90, 148, 117, 105, 154, 64, 235, 155, 23, 136, 171, 200, 33, 118, 179, 68, 159, 168, 131, 193, 223, 63, 17, 73, 113, 58, 151, 22, 56, 228, 204, 101, 42, 89, 180, 112, 133, 97, 4, 18, 125, 30, 2, 75, 87, 186, 25, 238, 188, 18, 23, 211, 152, 42, 234, 43, 200, 67, 219, 107, 125, 40, 53, 240, 206, 61, 193, 175, 43, 82, 217, 11, 93, 160, 144, 249, 182, 178, 240, 217, 29, 117, 162, 250, 28, 239, 192, 147, 89, 71, 73, 17, 227, 148, 43, 191, 129, 156, 103, 42, 142, 134, 217, 129, 236, 241, 75, 80, 89, 71, 42, 207, 93, 116, 229, 165, 63, 72, 86, 221, 160, 155, 12, 141, 220, 210, 162, 1, 7, 93, 242, 61, 5, 117, 201, 81, 49, 163, 66, 142, 68, 45, 11, 102, 169, 153, 7, 37, 137, 138, 168, 233, 183, 166, 225, 83, 220, 174, 6, 17, 84, 200, 118, 253, 27, 252, 248, 122, 184, 176, 88, 247, 176, 250, 235, 51, 210, 45, 154, 199, 85, 253, 1, 212, 130, 78, 120, 245, 149, 44, 200, 63, 164, 103, 13, 185, 21, 128, 149, 69, 24, 248, 165, 146, 49, 168, 10, 98, 38, 198, 243, 96, 113, 90, 236, 230, 241, 171, 165, 253, 152, 5, 217, 25, 61, 51, 211, 126, 250, 109, 201, 230, 167, 1, 186, 137, 74, 145, 16, 3, 237, 151, 74, 145, 138, 91, 109, 8, 182, 59, 32, 15, 91, 64, 139, 240, 29, 168, 223, 134, 11, 116, 102, 104, 215, 112, 109, 205, 129, 199, 225, 68, 222, 81, 73, 153, 5, 200, 142, 18, 235, 124, 171, 157, 72, 6, 175, 94, 203, 212, 35, 51, 80, 43, 249, 37, 194, 131, 75, 184, 112, 62, 138, 205, 60, 84, 141, 54, 128, 47, 18, 21, 113, 177, 92, 146, 134, 122, 140, 43, 13, 139, 245, 29, 135, 42, 107, 180, 216, 55, 161, 198, 194, 232, 170, 236, 186, 243, 227, 10, 224, 156, 40, 160, 194, 251, 54, 206, 74, 185, 246, 45, 206, 53, 66, 84, 227, 155, 0, 236, 158, 82, 219, 105, 126, 160, 234, 186, 206, 218, 12, 180, 146, 199, 35, 174, 9, 9, 56, 77, 41, 74, 47, 36, 82, 252, 134, 215, 134, 28, 55, 165, 157, 106, 221, 52, 176, 108, 104, 181 },
                            UserId = 1
                        });
                });

            modelBuilder.Entity("wa_api.Models.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Family")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("OwnerId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Content")
                        .IsUnique();

                    b.HasIndex("OwnerId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("wa_api.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("EmailVerified")
                        .HasColumnType("boolean");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "testemail@test.com",
                            EmailVerified = true,
                            Username = "testusername"
                        });
                });

            modelBuilder.Entity("ConversationUser", b =>
                {
                    b.HasOne("wa_api.Models.Conversation", null)
                        .WithMany()
                        .HasForeignKey("ConversationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wa_api.Models.User", null)
                        .WithMany()
                        .HasForeignKey("MembersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("wa_api.Models.Message", b =>
                {
                    b.HasOne("wa_api.Models.User", "Author")
                        .WithMany("Messages")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wa_api.Models.Conversation", "Conversation")
                        .WithMany("Messages")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Conversation");
                });

            modelBuilder.Entity("wa_api.Models.Password", b =>
                {
                    b.HasOne("wa_api.Models.User", "User")
                        .WithOne("Password")
                        .HasForeignKey("wa_api.Models.Password", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("wa_api.Models.RefreshToken", b =>
                {
                    b.HasOne("wa_api.Models.User", "Owner")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("wa_api.Models.Conversation", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("wa_api.Models.User", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("Password")
                        .IsRequired();

                    b.Navigation("RefreshTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
